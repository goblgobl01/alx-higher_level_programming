/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aidnassa <aidnassa@student.1337.ma>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/09 20:38:15 by aidnassa          #+#    #+#             */
/*   Updated: 2024/12/10 18:29:06 by aidnassa         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char	*ft_strchr(char *s, int c)
{
	while (s && *s)
	{
		if (*s == (char)c)
			return ((char *)s);
		s++;
	}
	if ((char)c == '\0')
		return ((char *)s);
	return (NULL);
}

char	*ft_strdup(char *s1)
{
	int		n;
	char	*s2;

	if (!s1)
		return (NULL);
	n = 0;
	while (s1[n])
		n++;
	s2 = malloc(n + 1);
	if (!s2)
		return (NULL);
	s2[n] = '\0';
	while (n--)
		s2[n] = s1[n];
	return (s2);
}

char	*ft_split(char *line, char **left)
{
	char	*nl;
	char	*rtn;
	int		i;

	nl = ft_strchr(line, '\n');
	if (nl)
	{
		i = nl - line;
		free(*left);
		*left = ft_strdup(nl + 1);
		rtn = malloc(i + 2);
		if (!rtn)
		{
			left = NULL;
			return (NULL);
		}
		rtn[i] = '\n';
		rtn[i + 1] = '\0';
		while (i--)
			rtn[i] = line[i];
		free(line);
		return (rtn);
	}
	return (line);
}

char	*build_line(char *last, char *buf, char *left, int n)
{
	int		j;
	int		k;
	char	*line;

	j = 0;
	k = 0;
	while (last && last[j])
			j++;
	while (left && left[k])
			k++;
	line = malloc(n + j + k + 1);
	if (!line)
		return (NULL);
	line[n + j + k] = '\0';
	while(n--)
		line[j + k + n] = buf[n];
	while(j--)
		line[j + k] = last[j];
	while(k--)
		line[k] = left[k];
	free(last);
	return (line);
}

char	*get_next_line(int fd)
{
	static char	*left;
	char	buf[BUFFER_SIZE + 1];
	char	*line = NULL;
	int		n;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (NULL);
	while (1)
	{
		n = read(fd, buf, BUFFER_SIZE);
		if (n <= 0 )
		{
			if (left)
			{
				free(left);
				left = NULL;
			}
			break;
		}
		buf[n] = '\0';
		line = build_line(line, buf, left, n);
		if (!line)
			break;
		if (ft_strchr(line, '\n'))
		{
			line = ft_split(line, &left);
			break;
		}
	}
	return (line);
}